plugins {
    id "fabric-loom" version "1.7-SNAPSHOT"
    id "me.modmuss50.mod-publish-plugin" version "0.5.2"
}

version = mod_version + "-fabric-" + minecraft_suffix
group = maven_group
base.archivesName = mod_id

sourceCompatibility = JavaLanguageVersion.of(java_target)
targetCompatibility = JavaLanguageVersion.of(java_target)

println("Java: " + System.getProperty("java.version") + " JVM: " + System.getProperty("java.vm.version") + "(" + System.getProperty("java.vendor") + ") Arch: " + System.getProperty("os.arch"))

// Keep parameter names when compiling
compileJava.options.compilerArgs.add '-parameters'

repositories {
    flatDir { dirs "libs" }
    maven { url "https://www.cursemaven.com" }
    exclusiveContent {
        forRepository {
            maven { url = "https://api.modrinth.com/maven" }
        }
        filter { includeGroup "maven.modrinth" }
    }
    maven { url = "https://repo.spongepowered.org/maven" }
}

dependencies {
    // Minecraft
    minecraft "com.mojang:minecraft:${minecraft_version}"
    // Official mappings
    mappings loom.officialMojangMappings()

    // Fabric Loader
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    // Core library
//    modImplementation "curse.maven:supermartijn642s-core-lib-454372:${core_library_file}"
    modImplementation "a:supermartijn642corelib:1.1.17-fabric-mc1.21.2"
    // Config library
    modImplementation "curse.maven:supermartijn642s-config-lib-438332:${config_library_file}"

    // Team Reborn Energy API
    modCompileOnly("teamreborn:energy:${team_reborn_energy_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    // Jade
    modCompileOnly "curse.maven:jade-324717:${jade_version}"

    // Just Enough Items
//    modRuntimeOnly "curse.maven:jei-238222:${just_enough_items_file}"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir "src/generated/resources" }

processResources {
    inputs.property "version", version

    // Replace the mod version
    Map<String, ?> copyProperties = project.properties.clone() as Map<String, ?>
    //noinspection UnnecessaryQualifiedReference
    var matcher = java.util.regex.Pattern.compile("[^.0-9]").matcher(copyProperties.mod_version as String)
    if (matcher.find())
        copyProperties.mod_version = copyProperties.mod_version.substring(0, matcher.start()) + "+" + copyProperties.mod_version.substring(matcher.start())

    filesMatching(["fabric.mod.json", "modid.mixins.json", "pack.mcmeta"]) {
        expand copyProperties
    }

    exclude "**/*.pdn"

    rename "^modid.accesswidener\$", "${mod_id}.accesswidener"
    rename "^modid.mixins.json\$", "${mod_id}.mixins.json"
    rename "^icon.png\$", "${mod_id}.png"
}

loom {
    accessWidenerPath = file("src/main/resources/modid.accesswidener")

    runs {
        client {
            name "Fabric Client"
            client()
        }
        server {
            name "Fabric Server"
            server()
        }
        datagenClient {
            inherit client
            name "Fabric Datagen"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.manual-dir=${file("src/main/resources")}"

            ideConfigGenerated = true
            runDir "build/datagen"
        }
    }

    mixin {
        defaultRefmapName = "${mod_id}.mixins.refmap.json"
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = Integer.parseInt((String) java_target)
}

java {
    withSourcesJar()
}

publishMods {
    file = remapJar.archiveFile
    displayName = "${mod_name} ${mod_version} for Fabric ${minecraft_suffix.substring(2)}"
    version = project.version
    //noinspection UnnecessaryQualifiedReference
    type = me.modmuss50.mpp.ReleaseType.of(publishing_release_type.toUpperCase())
    changelog = file("changelog.md").text
    modLoaders.addAll("fabric", "quilt")
    maxRetries = 2

    curseforge {
        accessToken = System.getenv("CURSEFORGE_TOKEN")
        projectId = curseforge_project_id
        if (!curseforge_required_dependency_ids.isEmpty())
            curseforge_required_dependency_ids.split(" ").each it::requires
        if (!curseforge_optional_dependency_ids.isEmpty())
            curseforge_optional_dependency_ids.split(" ").each it::optional
        publishing_game_versions.split(" ").each minecraftVersions::add
        clientRequired = true
        serverRequired = true
    }

    modrinth {
        accessToken = System.getenv("MODRINTH_TOKEN")
        projectId = modrinth_project_id
        displayName = "${mod_name} ${mod_version}"
        if (!modrinth_required_dependency_ids.isEmpty())
            modrinth_required_dependency_ids.split(" ").each it::requires
        if (!modrinth_optional_dependency_ids.isEmpty())
            modrinth_optional_dependency_ids.split(" ").each it::optional
        publishing_game_versions.split(" ").each minecraftVersions::add
    }
}

// Rename the 'publishMods' task
tasks.publishMods.group = "other"
tasks.register("publishAll") {
    group = "publishing"
    dependsOn(tasks.publishMods)
}
